import vertica_python
from airflow.hooks.base import BaseHook

from pathlib import Path
from logging import Logger
from typing import Dict, Optional, Any

"""
CONN_INFO = {'host': 'vertica.tgcloudenv.ru',
             'port': 5433,
             'user': 'KOSYAK1998YANDEXRU',
             'password': 'eTxHgF49CopW9TQ',
             'database': 'dwh',
             # autogenerated session label by default,
             'session_label': 'some_label',
             # default throw error on invalid UTF-8 results
             'unicode_error': 'strict',
             # SSL is disabled by default
             'ssl': False,
             # autocommit is off by default
             'autocommit': False,
             # using server-side prepared statements is disabled by default
             'use_prepared_statements': False,
             # connection timeout is not enabled by default
             # 5 seconds timeout for a socket operation (Establishing a TCP connection or read/write operation)
             'connection_timeout': 30
            }
"""

class VerticaConnection:
    
    def __init__(self, conn_id) -> None:
        connection = BaseHook.get_connection(conn_id)
        self.host = connection.host
        self.port = connection.port
        self.user = connection.login
        self.password = connection.password
        self.database = connection.schema

    def get_conn_info(self) -> Dict:

        return {
            'host': self.host,
            'port': self.port,
            'user': self.user,
            'password': self.password,
            'database': self.database,
            # autogenerated session label by default,
            'session_label': 'some_label',
            # default throw error on invalid UTF-8 results
            'unicode_error': 'strict',
            # SSL is disabled by default
            'ssl': False,
            # autocommit is off by default
            'autocommit': False,
            # using server-side prepared statements is disabled by default
            'use_prepared_statements': False,
            # connection timeout is not enabled by default
            # 5 seconds timeout for a socket operation (Establishing a TCP connection or read/write operation)
            'connection_timeout': 30
        }
    
    def get_connection(self) -> vertica_python.Connection:
        return vertica_python.connect(**self.get_conn_info())


def vertica_operator(
        log: Logger,
        operator_mode: str,
        path_to_script: str,
        script_args: Optional[Dict] = None,
        conn_info: Optional[Dict] = None,
        connection: Optional[vertica_python.Connection] = None,
    ) -> Optional[Any]:
    script = Path(path_to_script).read_text()
    log.info("Prepared script to execute:")
    log.info(script)
    try:
        with (vertica_python.connect(**conn_info) if conn_info is not None else connection) as conn:
            log.info("Vertica connection succses")
            cur = conn.cursor()
            if script_args is not None:
                cur.execute(script, script_args)
            else: 
                cur.execute(script)
            if operator_mode == 'insert':
                log.info(f"Vertica: data has been uploaded succsesfully")
                conn.commit()
                cur.close()
                return True
            elif operator_mode == 'select':
                data = cur.fetchone()
                cur.close()
                log.info("Vertica: data has been downloaded succsesfully")
                log.info(f"Vertica: downloaded data: {data}")
                return data
            else:
                log.error(f"Vertica: operator mode hasn't matched with any setup. Check the args")
                return False
    except vertica_python.DatabaseError:
        log.error(f"Vertica: database error occured during the operator processing")
        return False